pipeline {
   agent {label 'k8s-storage-perf && x86_64'}
   options { skipDefaultCheckout() } 

   environment{
      GHE_URL="git@github.ibm.com:${JOB_ORGANIZATION}/${GHE_REPO}.git"
      GHE_HTTP_URL="https://github.ibm.com/${JOB_ORGANIZATION}/${GHE_REPO}"
      
      //DOCKER REPOS
      DOCKER_REGISTRY="docker-na.artifactory.swg-devops.com/hyc-cp4d-team-bootstrap-2-docker-local"
      DOCKER_REPO="ibm_cpd_zen"
      IMAGE_NAME="k8s-storage-perf"
      DEV_REGISTRY="cp.stg.icr.io/cp/cpd"
      PROD_REGISTRY="icr.io/cpopen/cpd"
      
      //VERSION TAGS TO BE USED BY THE BUILD - PASSED IN FROM JENKINS
      CPD_VER="${CP4D_VERSION}"
      
      // SLACK CHANNEL
      SLACK_CHANNEL="#${SLACK_CHANNEL}"
   }
   stages {
      stage("Setup Stage"){
         steps{
            script {
               env.TIME_STAMP = sh(script: 'echo `date +"%Y%m%d.%H%M%S"`', returnStdout:true).trim()
               env.TAG_ID="${CPD_VER}.${TIME_STAMP}.${BUILD_NUMBER}"
               env.DOCKER_IMAGE="${DOCKER_REGISTRY}/${DOCKER_REPO}/${IMAGE_NAME}"
               env.DOCKER_EXE="podman"
               currentBuild.displayName="BRANCH:${BRANCH}-BUILD_ID:${env.TAG_ID}"
            }
         }
      }
      stage('Run parallel builds'){
          parallel {
             stage('Full x86 build process') {
                stages {
                   stage("Clone repo"){
                      steps {
                         // Get the node name so we can make sure all steps run on same node
                         echo "NODE_NAME = ${env.NODE_NAME}"
                  
                         dir ("${IMAGE_NAME}"){
                            deleteDir()
                            git  branch: "${BRANCH}", credentialsId: "${GIT_CREDENTIALS_ID}", url: "${GHE_URL}" , poll: false
                         }
                      }
                   }
                   stage("Build"){
                      steps{
                         script {
                            // Get the node name so we can make sure all steps run on same node
                            echo "NODE_NAME = ${env.NODE_NAME}"

                            withEnv(['ARC_TYPE=x86_64']){

                               withCredentials([usernamePassword(credentialsId: 'Docker-James', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                                  dir ("${IMAGE_NAME}"){                  
                                     sh '''                        
                                        ${DOCKER_EXE} login -u ${DOCKER_USER} -p ${DOCKER_PASS} docker.io  
                                 
                                        # Docker Images Before Build
                                        ${DOCKER_EXE} images
                                        ${DOCKER_EXE} ps -a

                                        # Setup Clean Build Environment
                                        ${DOCKER_EXE} system prune -f --all

                                        # Inject the docker_image into the build
                                        sed -i "s|CP4D_VERSION|${CP4D_VERSION}|" ../dockerfile
                                        ./build/build.sh
                 
                                        # Docker Images After Build
                                        ${DOCKER_EXE} images
                                        ${DOCKER_EXE} ps -a
                                     '''
                                  }
                               }
                            }
                         }
                      }
                   }
                   stage('Deploy Image x86_64 to artifactory') {
                      steps{
                         script{
                            echo "NODE_NAME = ${env.NODE_NAME}"

                            withEnv(['ARC_TYPE=x86_64']){
                               withCredentials([usernamePassword(credentialsId: 'JAMES_ARTIFACTORY', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_KEY')]) {
                                  sh '''
                                      # PUSH IMAGE TO ARTIFACTORY
                                      ${DOCKER_EXE} login ${DOCKER_REGISTRY} -u ${ARTIFACTORY_USER} -p ${ARTIFACTORY_KEY}
                                      ${DOCKER_EXE} push --format=v2s2 ${DOCKER_IMAGE}:${TAG_ID}-${ARC_TYPE}
                                     
                                     if [[ "$LATEST" == "true" ]]; then
                                        skopeo copy --preserve-digests --format=v2s2 docker://${DOCKER_IMAGE}:${TAG_ID} \
                                                    docker://${DOCKER_IMAGE}:latest-${ARC_TYPE} \
                                                    --src-creds ${ARTIFACTORY_USER}:${ARTIFACTORY_KEY} \
                                                    --dest-creds ${ARTIFACTORY_USER}:${ARTIFACTORY_KEY} \
                                                    --all
                                     fi
                                  '''
                               }
                            }
                         }
                      }
                   }
                   stage('DEPLOY X86_64 IMAGE TO ICR STAGING') {
                      when {
                         expression { return params.STAGING == true }
                      }
                      steps{
                         script{
                            // Get the node name so we can make sure all steps run on same node
                            echo "NODE_NAME = ${env.NODE_NAME}"
                  
                            withEnv(['ARC_TYPE=x86_64']){
                               withCredentials([usernamePassword(credentialsId: 'JAMES_ARTIFACTORY', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_KEY'),
                                                string(credentialsId: 'JAMES_ICR_STAGING', variable: 'ICR_KEY')]) {
                                  sh '''
                                     # PUSH IMAGE TO ICR STAGING
                                     ${DOCKER_EXE} login cp.stg.icr.io -u iamapikey -p ${ICR_KEY}
                                    
                                     skopeo copy --preserve-digests --format=v2s2 docker://${DOCKER_IMAGE}:${TAG_ID}-${ARC_TYPE} \
                                                 docker://${DEV_REGISTRY}/${IMAGE_NAME}:${TAG_ID}-${ARC_TYPE} \
                                                 --src-creds ${ARTIFACTORY_USER}:${ARTIFACTORY_KEY} \
                                                 --dest-creds iamapikey:${ICR_KEY} \
                                                 --all
                                  '''
                               }
                            }
                         }
                      }
                   }
                }
             }
             stage('Full ppc64le build process') {
                when {
                   expression { return params.PPC64LE == true }
                }
                agent {label 'k8s-storage-perf && ppc64le && power9'}
                stages {
                   stage("Clone repo"){
                      steps {
                         
                         // Get the node name so we can make sure all steps run on same node
                         echo "NODE_NAME = ${env.NODE_NAME}"
                  
                         dir ("${IMAGE_NAME}"){
                            deleteDir()
                            sleep(time: 1, unit: 'MINUTES')
                            git  branch: "${BRANCH}", credentialsId: "${GIT_CREDENTIALS_ID}", url: "${GHE_URL}" , poll: false
                         }
                      }
                   }
                   stage("Build"){
                      steps{
                         script {
                            // Get the node name so we can make sure all steps run on same node
                            echo "NODE_NAME = ${env.NODE_NAME}"

                            withEnv(['ARC_TYPE=ppc64le']){

                               withCredentials([usernamePassword(credentialsId: 'Docker-James', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {                               
                                  dir ("${IMAGE_NAME}"){                  
                                     sh '''                        
                                        ${DOCKER_EXE} login -u ${DOCKER_USER} -p ${DOCKER_PASS} docker.io  
                                     
                                        # Docker Images Before Build
                                        ${DOCKER_EXE} images
                                        ${DOCKER_EXE} ps -a

                                        # Setup Clean Build Environment
                                        ${DOCKER_EXE} system prune -f --all

                                        # Inject the docker_image into the build
                                        sed -i "s|CP4D_VERSION|${CP4D_VERSION}|" ../dockerfile
                                        ./build/build.sh
                     
                                        # Docker Images After Build
                                        ${DOCKER_EXE} images
                                        ${DOCKER_EXE} ps -a
                                     '''
                                  }
                               }
                            }
                         }
                      }
                   }
                   stage('Deploy Image ppc64le to artifactory') {
                      steps{
                         script{
                            echo "NODE_NAME = ${env.NODE_NAME}"

                            withEnv(['ARC_TYPE=ppc64le']){
                               withCredentials([usernamePassword(credentialsId: 'JAMES_ARTIFACTORY', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_KEY')]) {
                                  sh '''
                                      # PUSH IMAGE TO ARTIFACTORY
                                      ${DOCKER_EXE} login ${DOCKER_REGISTRY} -u ${ARTIFACTORY_USER} -p ${ARTIFACTORY_KEY}
                                      ${DOCKER_EXE} push --format=v2s2 ${DOCKER_IMAGE}:${TAG_ID}-${ARC_TYPE}
                                     
                                     if [[ "$LATEST" == "true" ]]; then
                                        skopeo copy --preserve-digests --format=v2s2 docker://${DOCKER_IMAGE}:${TAG_ID} \
                                                    docker://${DOCKER_IMAGE}:latest-${ARC_TYPE} \
                                                    --src-creds ${ARTIFACTORY_USER}:${ARTIFACTORY_KEY} \
                                                    --dest-creds ${ARTIFACTORY_USER}:${ARTIFACTORY_KEY} \
                                                    --all
                                     fi
                                  '''
                               }
                            }
                         }
                      }
                   }
                   stage('DEPLOY POWER IMAGE TO ICR STAGING') {
                      when {
                         expression { return params.STAGING == true }
                      }
                      steps{
                         script{
                            // Get the node name so we can make sure all steps run on same node
                            echo "NODE_NAME = ${env.NODE_NAME}"
                  
                            withEnv(['ARC_TYPE=ppc64le']){
                               withCredentials([usernamePassword(credentialsId: 'JAMES_ARTIFACTORY', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_KEY'),
                                                string(credentialsId: 'JAMES_ICR_STAGING', variable: 'ICR_KEY')]) {
                                  sh '''
                                     # PUSH IMAGE TO ICR STAGING
                                     ${DOCKER_EXE} login cp.stg.icr.io -u iamapikey -p ${ICR_KEY}
                                    
                                     skopeo copy --preserve-digests --format=v2s2 docker://${DOCKER_IMAGE}:${TAG_ID}-${ARC_TYPE} \
                                                 docker://${DEV_REGISTRY}/${IMAGE_NAME}:${TAG_ID}-${ARC_TYPE} \
                                                 --src-creds ${ARTIFACTORY_USER}:${ARTIFACTORY_KEY} \
                                                 --dest-creds iamapikey:${ICR_KEY} \
                                                 --all
                                  '''
                               }
                            }
                         }
                      }
                   }
                }
             }
             stage('Full s390x build process') {
                when {
                   expression { return params.PPC64LE == true }
                }
                agent {label 'k8s-storage-perf && s390x'}
                stages {
                   stage("Clone repo"){
                      steps {
                         // Get the node name so we can make sure all steps run on same node
                         echo "NODE_NAME = ${env.NODE_NAME}"
                  
                         dir ("${IMAGE_NAME}"){
                            deleteDir()
                            sleep(time: 2, unit: 'MINUTES')
                            git  branch: "${BRANCH}", credentialsId: "${GIT_CREDENTIALS_ID}", url: "${GHE_URL}" , poll: false
                         }
                      }
                   }
                   stage("Build"){
                      steps{
                         script {
                            // Get the node name so we can make sure all steps run on same node
                            echo "NODE_NAME = ${env.NODE_NAME}"

                            withEnv(['ARC_TYPE=s390x']){
                               withCredentials([usernamePassword(credentialsId: 'Docker-James', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {                               
                                  dir ("${IMAGE_NAME}"){                  
                                     sh '''                        
                                        ${DOCKER_EXE} login -u ${DOCKER_USER} -p ${DOCKER_PASS} docker.io  
                                     
                                        # Docker Images Before Build
                                        ${DOCKER_EXE} images
                                        ${DOCKER_EXE} ps -a

                                        # Setup Clean Build Environment
                                        ${DOCKER_EXE} system prune -f --all

                                        # Inject the docker_image into the build
                                        sed -i "s|CP4D_VERSION|${CP4D_VERSION}|" ../dockerfile
                                        ./build/build.sh
                     
                                        # Docker Images After Build
                                        ${DOCKER_EXE} images
                                        ${DOCKER_EXE} ps -a
                                     '''
                                  }
                               }
                            }
                         }
                      }
                   }
                   stage('Deploy Image S390X to artifactory') {
                      steps{
                         script{
                            echo "NODE_NAME = ${env.NODE_NAME}"

                            withEnv(['ARC_TYPE=s390x']){
                               withCredentials([usernamePassword(credentialsId: 'JAMES_ARTIFACTORY', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_KEY')]) {
                                  sh '''
                                      # PUSH IMAGE TO ARTIFACTORY
                                      ${DOCKER_EXE} login ${DOCKER_REGISTRY} -u ${ARTIFACTORY_USER} -p ${ARTIFACTORY_KEY}
                                      ${DOCKER_EXE} push --format=v2s2 ${DOCKER_IMAGE}:${TAG_ID}-${ARC_TYPE}
                                     
                                     if [[ "$LATEST" == "true" ]]; then
                                        skopeo copy --preserve-digests --format=v2s2 docker://${DOCKER_IMAGE}:${TAG_ID} \
                                                    docker://${DOCKER_IMAGE}:latest-${ARC_TYPE} \
                                                    --src-creds ${ARTIFACTORY_USER}:${ARTIFACTORY_KEY} \
                                                    --dest-creds ${ARTIFACTORY_USER}:${ARTIFACTORY_KEY} \
                                                    --all
                                     fi
                                  '''
                               }
                            }
                         }
                      }
                   }
                   stage('DEPLOY Z IMAGE TO ICR STAGING') {
                      when {
                         expression { return params.STAGING == true }
                      }
                      steps{
                         script{
                            // Get the node name so we can make sure all steps run on same node
                            echo "NODE_NAME = ${env.NODE_NAME}"
                  
                            withEnv(['ARC_TYPE=s390x']){
                               withCredentials([usernamePassword(credentialsId: 'JAMES_ARTIFACTORY', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_KEY'),
                                                string(credentialsId: 'JAMES_ICR_STAGING', variable: 'ICR_KEY')]) {
                                  sh '''
                                     # PUSH IMAGE TO ICR STAGING
                                     ${DOCKER_EXE} login cp.stg.icr.io -u iamapikey -p ${ICR_KEY}
                                    
                                     skopeo copy --preserve-digests --format=v2s2 docker://${DOCKER_IMAGE}:${TAG_ID}-${ARC_TYPE} \
                                                 docker://${DEV_REGISTRY}/${IMAGE_NAME}:${TAG_ID}-${ARC_TYPE} \
                                                 --src-creds ${ARTIFACTORY_USER}:${ARTIFACTORY_KEY} \
                                                 --dest-creds iamapikey:${ICR_KEY} \
                                                 --all
                                  '''
                               }
                            }
                         }
                      }
                   }
                }
             }
          }
      }
      stage('BVT') {
            when {
               expression { return params.BVT == true }
            }
            steps {
               script{
                  def handle=null
                  def jobUrl=null
                  
                  //Set BVT_SUCCESS TO TRUE (it wasn't setting if you put this after the handle command)
                  echo "TODO: Intergrate some sort of build verification testing"
                  env.BVT_STATUS="SUCCESS"

               }
          	}
      }
      stage("PROMOTE TO ICR STAGING"){
            when {
                expression { return params.BVT == true }
                expression { return params.STAGING == true }
            }
            steps{
                script {
                   withCredentials([string(credentialsId: 'JAMES_ICR_STAGING', variable: 'ICR_KEY')]) {
                      if ( env.BVT_STATUS == "SUCCESS" ) {
                         echo "BVT SUCCESSFUL, PROMOTING TO ICR"
                         sh '''
                            # PROMOTE TO ICR STAGING
                            if [[ "$LATEST" == "true" ]]; then
                               skopeo copy --preserve-digests --format=v2s2 docker://${DEV_REGISTRY}/${IMAGE_NAME}:${TAG_ID}-x86_64 \
                                           docker://${DEV_REGISTRY}/${IMAGE_NAME}:latest-validated \
                                           --src-creds iamapikey:${ICR_KEY} \
                                           --dest-creds iamapikey:${ICR_KEY} \
                                           --all
                            fi

                            # TAG IMAGES WITH CPD_VER
                            skopeo copy --preserve-digests --format=v2s2 docker://${DEV_REGISTRY}/${IMAGE_NAME}:${TAG_ID}-x86_64 \
                                        docker://${DEV_REGISTRY}/${IMAGE_NAME}:${CPD_VER}-x86_64 \
                                        --src-creds iamapikey:${ICR_KEY} \
                                        --dest-creds iamapikey:${ICR_KEY} \
                                        --all
                            skopeo copy --preserve-digests --format=v2s2 docker://${DEV_REGISTRY}/${IMAGE_NAME}:${TAG_ID}-ppc64le \
                                        docker://${DEV_REGISTRY}/${IMAGE_NAME}:${CPD_VER}-ppc64le \
                                        --src-creds iamapikey:${ICR_KEY} \
                                        --dest-creds iamapikey:${ICR_KEY} \
                                        --all
                            skopeo copy --preserve-digests --format=v2s2 docker://${DEV_REGISTRY}/${IMAGE_NAME}:${TAG_ID}-s390x \
                                        docker://${DEV_REGISTRY}/${IMAGE_NAME}:${CPD_VER}-s390x \
                                        --src-creds iamapikey:${ICR_KEY} \
                                        --dest-creds iamapikey:${ICR_KEY} \
                                        --all
                            
                            # CREATE FAT MANIFEST
                            ${DOCKER_EXE} login ${DEV_REGISTRY} -u iamapikey -p ${ICR_KEY}
                            ${DOCKER_EXE} manifest create ${DEV_REGISTRY}/${IMAGE_NAME}:${CPD_VER} \
                               ${DEV_REGISTRY}/${IMAGE_NAME}:${CPD_VER}-x86_64 \
                               ${DEV_REGISTRY}/${IMAGE_NAME}:${CPD_VER}-ppc64le \
                               ${DEV_REGISTRY}/${IMAGE_NAME}:${CPD_VER}-s390x
                            ${DOCKER_EXE} manifest inspect ${DEV_REGISTRY}/${IMAGE_NAME}:${CPD_VER}
                            ${DOCKER_EXE} manifest push --format=v2s2 ${DEV_REGISTRY}/${IMAGE_NAME}:${CPD_VER} docker://${DEV_REGISTRY}/${IMAGE_NAME}:${CPD_VER}
         
                            # VIEW IMAGE DETAILS
                            ${DOCKER_EXE} images --digests
                            ${DOCKER_EXE} ps -a
                         '''
                      }
                      else {
                         echo "BVT FAILED, NOT PROMOTING TO ICR"
                      }
                   }
                }
            }
      }
      stage("PROMOTE TO ICR PROD"){
         when {
             expression { return params.BVT == true }
             expression { return params.PROD == true }
         }
         steps{
             script {
                withCredentials([string(credentialsId: 'JAMES_ICR_STAGING', variable: 'ICR_KEY'),
                                 string(credentialsId: 'ICR_CPOPEN', variable: 'CPOPEN_KEY')]) {
                   if ( env.BVT_STATUS == "SUCCESS" ) {
                      echo "BVT SUCCESSFUL, PROMOTING TO ICR"
                      sh '''
                         # PROMOTE TO ICR STAGING
                         skopeo copy --preserve-digests --format=v2s2 docker://${DEV_REGISTRY}/${IMAGE_NAME}:${CPD_VER} \
                                     docker://${PROD_REGISTRY}/${IMAGE_NAME}:${CPD_VER} \
                                     --src-creds iamapikey:${ICR_KEY} \
                                     --dest-creds iamapikey:${CPOPEN_KEY} \
                                     --all
                                        
                         # VERIFY FAT MANIFEST
                         ${DOCKER_EXE} login ${PROD_REGISTRY} -u iamapikey -p ${CPOPEN_KEY}
                         ${DOCKER_EXE} manifest inspect ${PROD_REGISTRY}/${IMAGE_NAME}:${CPD_VER}                                        
                      '''
                   }
                   else {
                      echo "BVT FAILED, NOT PROMOTING TO ICR"
                   }
                }
             }
         }
      }
   }
   post {
      success{
         echo "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
         slackSend (color: '#00FF00', channel: "${SLACK_CHANNEL}", message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.TAG_ID_WITH_TIME_STAMP}]' (${env.BUILD_URL}), MORE INFO: ${GHE_HTTP_URL}/blob/build_info/IMAGES.md")
      }
      failure{
         echo "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
         slackSend (color: '#FF0000', channel: "${SLACK_CHANNEL}", message: "FAILED: Job '${env.JOB_NAME} [${env.TAG_ID_WITH_TIME_STAMP}]' (${env.BUILD_URL})")
      }
   }
}